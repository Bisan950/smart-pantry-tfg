// lib/services/nutritional_analysis_service.dart

import 'dart:convert';
import 'dart:io';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:google_generative_ai/google_generative_ai.dart';
import '../models/product_model.dart';

class NutritionalAnalysisService {
  static final NutritionalAnalysisService _instance = NutritionalAnalysisService._internal();
  factory NutritionalAnalysisService() => _instance;
  NutritionalAnalysisService._internal();
  
  final String _apiKey = dotenv.env['GEMINI_API_KEY'] ?? '';
  final String _modelName = 'gemini-1.5-pro';

  /// üîç Analizar etiqueta nutricional desde imagen
  Future<NutritionalInfo?> analyzeNutritionalLabel(File imageFile) async {
    try {
      if (_apiKey.isEmpty) {
        print('‚ùå API key no configurada para an√°lisis nutricional');
        return null;
      }

      print('üì∏ Iniciando an√°lisis de etiqueta nutricional...');

      // Leer imagen y convertir a base64
      final bytes = await imageFile.readAsBytes();
      
      final prompt = '''
Analiza esta imagen de una etiqueta nutricional de un producto alimentario.

INSTRUCCIONES CR√çTICAS:
1. Lee √öNICAMENTE la informaci√≥n que aparece claramente escrita en la etiqueta
2. Busca la tabla de "Informaci√≥n Nutricional", "Valores Nutricionales" o "Nutrition Facts"
3. Extrae los valores POR PORCI√ìN (serving size) que aparezcan en la etiqueta
4. Si no encuentras alg√∫n valor, devuelve null para ese campo
5. Convierte todas las unidades a gramos (g) para macros y miligramos (mg) para sodio

DATOS A EXTRAER:
- Tama√±o de porci√≥n (serving size)
- Calor√≠as por porci√≥n
- Prote√≠nas en gramos
- Carbohidratos en gramos
- Grasas totales en gramos
- Fibra en gramos
- Az√∫cares en gramos
- Sodio en miligramos

FORMATO DE RESPUESTA (JSON v√°lido √∫nicamente):
{
  "serving_size": n√∫mero_en_gramos_o_null,
  "serving_unit": "descripci√≥n_de_la_porci√≥n_como_aparece",
  "calories_per_serving": n√∫mero_entero_o_null,
  "macros": {
    "proteins": n√∫mero_decimal_o_null,
    "carbohydrates": n√∫mero_decimal_o_null,
    "fats": n√∫mero_decimal_o_null,
    "fiber": n√∫mero_decimal_o_null,
    "sugar": n√∫mero_decimal_o_null,
    "sodium": n√∫mero_decimal_mg_o_null
  },
  "detected_text": "resumen_del_texto_detectado",
  "confidence": n√∫mero_entre_0_y_1
}

IMPORTANTE:
- Si la imagen no contiene informaci√≥n nutricional clara, devuelve confidence: 0.0
- Si hay texto pero no es una etiqueta nutricional, devuelve confidence: 0.0
- Solo incluye valores que puedas leer con certeza
- Responde √öNICAMENTE con el JSON, sin explicaciones adicionales
''';

      final model = GenerativeModel(
        model: _modelName,
        apiKey: _apiKey,
        generationConfig: GenerationConfig(
          temperature: 0.1, // Muy baja para m√°xima precisi√≥n
          topP: 0.8,
          topK: 20,
          maxOutputTokens: 1024,
        ),
      );

      print('ü§ñ Enviando imagen a Gemini para an√°lisis...');
      
      final content = [
        Content.multi([
          TextPart(prompt),
          DataPart('image/jpeg', bytes),
        ])
      ];

      final response = await model.generateContent(content);

      if (response.candidates.isEmpty) {
        print('‚ùå Sin respuesta de Gemini para an√°lisis nutricional');
        return null;
      }

      final responseText = response.candidates.first.content.parts
          .whereType<TextPart>()
          .map((part) => part.text)
          .join();

      print('üìã Respuesta recibida de Gemini');
      print('Respuesta: $responseText');

      // Extraer y parsear JSON
      final jsonStr = _extractJsonFromResponse(responseText);
      final analysisData = jsonDecode(jsonStr);

      if (analysisData is Map<String, dynamic>) {
        return _parseNutritionalInfo(analysisData);
      }

      return null;
    } catch (e) {
      print('‚ùå Error analizando etiqueta nutricional: $e');
      return null;
    }
  }

  /// üîß Extraer JSON de la respuesta de IA
  String _extractJsonFromResponse(String response) {
    try {
      // Intentar decodificar directamente
      jsonDecode(response);
      return response;
    } catch (_) {
      // Buscar JSON en la respuesta
      final jsonMatch = RegExp(r'\{[\s\S]*\}').firstMatch(response);
      if (jsonMatch != null) {
        final jsonStr = jsonMatch.group(0);
        if (jsonStr != null) {
          try {
            jsonDecode(jsonStr);
            return jsonStr;
          } catch (_) {}
        }
      }
      
      // Limpiar markdown si existe
      String cleaned = response;
      if (cleaned.contains('```json')) {
        cleaned = cleaned.split('```json').last.split('```').first.trim();
      } else if (cleaned.contains('```')) {
        cleaned = cleaned.split('```').where((part) => part.contains('{') && part.contains('}')).join().trim();
      }
      
      try {
        jsonDecode(cleaned);
        return cleaned;
      } catch (_) {
        print('‚ö†Ô∏è No se pudo extraer JSON v√°lido de la respuesta');
        return '{"confidence": 0.0, "error": "invalid_response"}';
      }
    }
  }

  /// üîß Parsear informaci√≥n nutricional desde JSON
  NutritionalInfo? _parseNutritionalInfo(Map<String, dynamic> data) {
    try {
      // Verificar confianza m√≠nima
      final confidence = (data['confidence'] as num?)?.toDouble() ?? 0.0;
      if (confidence < 0.3) {
        print('‚ö†Ô∏è Confianza muy baja: $confidence');
        return null;
      }

      // Extraer datos b√°sicos
      final servingSize = (data['serving_size'] as num?)?.toDouble();
      final servingUnit = data['serving_unit'] as String?;
      final calories = (data['calories_per_serving'] as num?)?.toInt();

      // Extraer macros
      final macrosData = data['macros'] as Map<String, dynamic>?;
      if (macrosData == null) {
        print('‚ö†Ô∏è No se encontraron datos de macros');
        return null;
      }

      final proteins = (macrosData['proteins'] as num?)?.toDouble();
      final carbohydrates = (macrosData['carbohydrates'] as num?)?.toDouble();
      final fats = (macrosData['fats'] as num?)?.toDouble();
      final fiber = (macrosData['fiber'] as num?)?.toDouble();
      final sugar = (macrosData['sugar'] as num?)?.toDouble();
      final sodium = (macrosData['sodium'] as num?)?.toDouble();

      print('‚úÖ Informaci√≥n nutricional parseada correctamente');
      print('Calor√≠as: $calories, Prote√≠nas: $proteins, Carbohidratos: $carbohydrates, Grasas: $fats');

      return NutritionalInfo(
        servingSize: servingSize,
        servingUnit: servingUnit,
        calories: calories,
        proteins: proteins,
        carbohydrates: carbohydrates,
        fats: fats,
        fiber: fiber,
        sugar: sugar,
        sodium: sodium,
      );
    } catch (e) {
      print('‚ùå Error parseando informaci√≥n nutricional: $e');
      return null;
    }
  }

  /// üß™ Probar conexi√≥n con Gemini Vision
  Future<bool> testConnection() async {
    try {
      print('üîß Probando conexi√≥n con Gemini Vision...');
      
      if (_apiKey.isEmpty) {
        print('‚ùå API key no configurada');
        return false;
      }
      
      final model = GenerativeModel(
        model: _modelName,
        apiKey: _apiKey,
      );
      
      final response = await model.generateContent([
        Content.text('Responde √∫nicamente "OK" si puedes procesar im√°genes')
      ]);
      
      if (response.candidates.isEmpty) {
        print('‚ùå Sin respuesta de Gemini');
        return false;
      }
      
      final text = response.candidates.first.content.parts
          .whereType<TextPart>()
          .map((part) => part.text)
          .join();
      
      print('‚úÖ Conexi√≥n exitosa con Gemini');
      print('Respuesta: $text');
      
      return true;
    } catch (e) {
      print('‚ùå Error probando conexi√≥n: $e');
      return false;
    }
  }

  /// üîç Analizar imagen de alimento (para estimaci√≥n nutricional)
  Future<NutritionalInfo?> estimateNutritionFromFoodImage(File imageFile) async {
    try {
      if (_apiKey.isEmpty) {
        print('‚ùå API key no configurada');
        return null;
      }

      print('üçé Estimando nutrici√≥n desde imagen de alimento...');

      final bytes = await imageFile.readAsBytes();
      
      final prompt = '''
Analiza esta imagen de alimento y proporciona una estimaci√≥n nutricional.

INSTRUCCIONES:
1. Identifica el alimento o alimentos en la imagen
2. Estima el tama√±o de la porci√≥n visible
3. Proporciona valores nutricionales aproximados para esa porci√≥n

IMPORTANTE: Esta es una ESTIMACI√ìN, no valores exactos.

Responde en JSON:
{
  "identified_food": "descripci√≥n_del_alimento",
  "estimated_portion": "estimaci√≥n_del_tama√±o",
  "serving_size": gramos_estimados,
  "calories_per_serving": calor√≠as_estimadas,
  "macros": {
    "proteins": gramos_prote√≠na,
    "carbohydrates": gramos_carbohidratos,
    "fats": gramos_grasas,
    "fiber": gramos_fibra
  },
  "confidence": nivel_confianza_0_a_1,
  "is_estimation": true
}
''';

      final model = GenerativeModel(
        model: _modelName,
        apiKey: _apiKey,
        generationConfig: GenerationConfig(
          temperature: 0.3,
          topP: 0.8,
          maxOutputTokens: 1024,
        ),
      );

      final content = [
        Content.multi([
          TextPart(prompt),
          DataPart('image/jpeg', bytes),
        ])
      ];

      final response = await model.generateContent(content);

      if (response.candidates.isEmpty) {
        return null;
      }

      final responseText = response.candidates.first.content.parts
          .whereType<TextPart>()
          .map((part) => part.text)
          .join();

      final jsonStr = _extractJsonFromResponse(responseText);
      final data = jsonDecode(jsonStr);

      if (data is Map<String, dynamic>) {
        return _parseNutritionalInfo(data);
      }

      return null;
    } catch (e) {
      print('‚ùå Error estimando nutrici√≥n de alimento: $e');
      return null;
    }
  }

  /// üîß Crear informaci√≥n nutricional manual
  NutritionalInfo createManualNutritionalInfo({
    double? servingSize,
    String? servingUnit,
    int? calories,
    double? proteins,
    double? carbohydrates,
    double? fats,
    double? fiber,
    double? sugar,
    double? sodium,
  }) {
    return NutritionalInfo(
      servingSize: servingSize,
      servingUnit: servingUnit,
      calories: calories,
      proteins: proteins,
      carbohydrates: carbohydrates,
      fats: fats,
      fiber: fiber,
      sugar: sugar,
      sodium: sodium,
    );
  }
}