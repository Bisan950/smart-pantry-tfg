// lib/services/ai_product_analysis_service.dart

import 'dart:convert';
import 'dart:io';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:google_generative_ai/google_generative_ai.dart';
import '../models/product_model.dart';

class AIProductAnalysisService {
  static final AIProductAnalysisService _instance = AIProductAnalysisService._internal();
  factory AIProductAnalysisService() => _instance;
  AIProductAnalysisService._internal();
  
  final String _apiKey = dotenv.env['GEMINI_API_KEY'] ?? '';
  final String _modelName = 'gemini-1.5-pro';

  /// üçé Analizar producto desde imagen y crear producto completo
  Future<Product?> analyzeProductFromImage(File imageFile) async {
    try {
      // Validaci√≥n 1: API Key
      if (_apiKey.isEmpty) {
        print('‚ùå API key no configurada para an√°lisis de productos');
        throw Exception('API key de Gemini no configurada. Verifica tu archivo .env');
      }
  
      // Validaci√≥n 2: Archivo de imagen
      if (!await imageFile.exists()) {
        print('‚ùå El archivo de imagen no existe');
        throw Exception('El archivo de imagen no existe o no es accesible');
      }
  
      final fileSize = await imageFile.length();
      if (fileSize == 0) {
        print('‚ùå El archivo de imagen est√° vac√≠o');
        throw Exception('El archivo de imagen est√° vac√≠o');
      }
  
      if (fileSize > 20 * 1024 * 1024) { // 20MB l√≠mite
        print('‚ùå El archivo de imagen es demasiado grande: ${fileSize} bytes');
        throw Exception('El archivo de imagen es demasiado grande (m√°ximo 20MB)');
      }
  
      print('üì∏ Iniciando an√°lisis de producto por imagen...');
      print('üìä Tama√±o de archivo: ${fileSize} bytes');
  
      final bytes = await imageFile.readAsBytes();
      
      final prompt = '''
Analiza esta imagen de un producto alimentario y crea informaci√≥n completa para a√±adirlo a un inventario dom√©stico.

INSTRUCCIONES CR√çTICAS:
1. Identifica el producto principal en la imagen
2. Determina la categor√≠a m√°s apropiada
3. Estima la cantidad y unidad bas√°ndote en lo que ves
4. Sugiere una ubicaci√≥n de almacenamiento l√≥gica
5. Estima valores nutricionales aproximados para una porci√≥n t√≠pica
6. Sugiere una fecha de caducidad razonable desde hoy

CATEGOR√çAS DISPONIBLES:
- L√°cteos, Frutas, Verduras, Carnes, Pescados, Granos, Bebidas, Snacks, Congelados, Panader√≠a, Cereales, Condimentos, Conservas, Dulces

UBICACIONES DISPONIBLES:
- Nevera, Despensa, Congelador, Armario, Especias

UNIDADES DISPONIBLES:
- unidades, g, kg, ml, L, paquete, lata, botella

FORMATO DE RESPUESTA (JSON v√°lido √∫nicamente):
{
  "product_info": {
    "name": "nombre_descriptivo_del_producto",
    "category": "categor√≠a_de_la_lista",
    "estimated_quantity": n√∫mero_estimado,
    "unit": "unidad_apropiada",
    "suggested_location": "ubicaci√≥n_de_la_lista",
    "estimated_expiry_days": n√∫mero_d√≠as_desde_hoy,
    "confidence": n√∫mero_entre_0_y_1
  },
  "nutritional_info": {
    "serving_size": gramos_por_porci√≥n,
    "serving_unit": "descripci√≥n_porci√≥n",
    "calories": calor√≠as_estimadas,
    "proteins": gramos_prote√≠na,
    "carbohydrates": gramos_carbohidratos,
    "fats": gramos_grasas,
    "fiber": gramos_fibra_opcional,
    "sugar": gramos_az√∫car_opcional,
    "sodium": miligramos_sodio_opcional,
    "is_estimation": true
  },
  "additional_info": {
    "detected_items": ["lista", "de", "elementos", "detectados"],
    "quality_assessment": "descripci√≥n_del_estado_aparente",
    "storage_tips": "consejos_de_almacenamiento",
    "usage_suggestions": ["sugerencias", "de", "uso"]
  }
}

IMPORTANTE:
- Si no puedes identificar claramente el producto, devuelve confidence: 0.0
- S√© conservador con las estimaciones nutricionales
- Para productos frescos (frutas/verduras), estima peso individual
- Para productos empaquetados, estima el contenido total
- Responde √öNICAMENTE con el JSON, sin explicaciones adicionales
''';

      final model = GenerativeModel(
        model: _modelName,
        apiKey: _apiKey,
        generationConfig: GenerationConfig(
          temperature: 0.3, // Balanceado para creatividad y precisi√≥n
          topP: 0.8,
          topK: 40,
          maxOutputTokens: 2048,
        ),
      );
  
      print('ü§ñ Enviando imagen a Gemini para an√°lisis...');
      
      final content = [
        Content.multi([
          TextPart(prompt),
          DataPart('image/jpeg', bytes),
        ])
      ];
  
      // Validaci√≥n 4: Llamada a la API con manejo espec√≠fico de errores
      GenerateContentResponse response;
      try {
        response = await model.generateContent(content);
        print('‚úÖ Respuesta recibida de Gemini');
      } catch (e) {
        print('‚ùå Error en la llamada a Gemini API: $e');
        if (e.toString().contains('API_KEY_INVALID')) {
          throw Exception('La API key de Gemini no es v√°lida. Verifica tu configuraci√≥n.');
        } else if (e.toString().contains('QUOTA_EXCEEDED')) {
          throw Exception('Se ha excedido la cuota de la API de Gemini.');
        } else if (e.toString().contains('PERMISSION_DENIED')) {
          throw Exception('Permisos denegados para la API de Gemini.');
        } else {
          throw Exception('Error de conectividad con Gemini: $e');
        }
      }
  
      if (response.candidates.isEmpty) {
        print('‚ùå Sin respuesta de Gemini para an√°lisis de producto');
        throw Exception('Gemini no pudo procesar la imagen. Intenta con una imagen m√°s clara.');
      }
  
      final responseText = response.candidates.first.content.parts
          .whereType<TextPart>()
          .map((part) => part.text)
          .join();
  
      print('üìã Respuesta recibida de Gemini');
      print('Respuesta: $responseText');
  
      // Extraer y parsear JSON
      final jsonStr = _extractJsonFromResponse(responseText);
      final analysisData = jsonDecode(jsonStr);
  
      if (analysisData is Map<String, dynamic>) {
        return _createProductFromAnalysis(analysisData);
      }
  
      throw Exception('Respuesta de IA en formato inv√°lido');
      
    } catch (e) {
      print('‚ùå Error analizando producto por imagen: $e');
      // Re-lanzar la excepci√≥n para que llegue al UI con el mensaje espec√≠fico
      rethrow;
    }
  }

  /// üîß Extraer JSON de la respuesta de IA
  String _extractJsonFromResponse(String response) {
    try {
      // Intentar decodificar directamente
      jsonDecode(response);
      return response;
    } catch (_) {
      // Buscar JSON en la respuesta
      final jsonMatch = RegExp(r'\{[\s\S]*\}').firstMatch(response);
      if (jsonMatch != null) {
        final jsonStr = jsonMatch.group(0);
        if (jsonStr != null) {
          try {
            jsonDecode(jsonStr);
            return jsonStr;
          } catch (_) {}
        }
      }
      
      // Limpiar markdown si existe
      String cleaned = response;
      if (cleaned.contains('```json')) {
        cleaned = cleaned.split('```json').last.split('```').first.trim();
      } else if (cleaned.contains('```')) {
        cleaned = cleaned.split('```').where((part) => part.contains('{') && part.contains('}')).join().trim();
      }
      
      try {
        jsonDecode(cleaned);
        return cleaned;
      } catch (_) {
        print('‚ö†Ô∏è No se pudo extraer JSON v√°lido de la respuesta');
        return '{"product_info": {"confidence": 0.0}, "error": "invalid_response"}';
      }
    }
  }

  /// üîß Crear producto desde an√°lisis
  Product? _createProductFromAnalysis(Map<String, dynamic> data) {
    try {
      final productInfo = data['product_info'] as Map<String, dynamic>?;
      if (productInfo == null) {
        print('‚ö†Ô∏è No se encontr√≥ informaci√≥n del producto');
        return null;
      }

      // Verificar confianza m√≠nima
      final confidence = (productInfo['confidence'] as num?)?.toDouble() ?? 0.0;
      print('üéØ Confianza del an√°lisis: $confidence');
      if (confidence < 0.2) { // Reducir de 0.4 a 0.2
        print('‚ö†Ô∏è Confianza muy baja: $confidence');
        return null;
      }

      // Extraer informaci√≥n del producto
      final name = productInfo['name'] as String? ?? 'Producto desconocido';
      final category = productInfo['category'] as String? ?? 'Otros';
      final quantity = (productInfo['estimated_quantity'] as num?)?.toInt() ?? 1;
      final unit = productInfo['unit'] as String? ?? 'unidades';
      final location = productInfo['suggested_location'] as String? ?? 'Despensa';
      final expiryDays = (productInfo['estimated_expiry_days'] as num?)?.toInt() ?? 7;

      // Extraer informaci√≥n nutricional
      NutritionalInfo? nutritionalInfo;
      final nutritionalData = data['nutritional_info'] as Map<String, dynamic>?;
      if (nutritionalData != null) {
        nutritionalInfo = NutritionalInfo(
          servingSize: (nutritionalData['serving_size'] as num?)?.toDouble(),
          servingUnit: nutritionalData['serving_unit'] as String?,
          calories: (nutritionalData['calories'] as num?)?.toInt(),
          proteins: (nutritionalData['proteins'] as num?)?.toDouble(),
          carbohydrates: (nutritionalData['carbohydrates'] as num?)?.toDouble(),
          fats: (nutritionalData['fats'] as num?)?.toDouble(),
          fiber: (nutritionalData['fiber'] as num?)?.toDouble(),
          sugar: (nutritionalData['sugar'] as num?)?.toDouble(),
          sodium: (nutritionalData['sodium'] as num?)?.toDouble(),
        );
      }

      // Calcular fecha de caducidad
      final expiryDate = DateTime.now().add(Duration(days: expiryDays));

      print('‚úÖ Producto creado desde an√°lisis de IA');
      print('Nombre: $name, Categor√≠a: $category, Cantidad: $quantity $unit');

      return Product(
        id: DateTime.now().millisecondsSinceEpoch.toString(),
        name: name,
        quantity: quantity,
        unit: unit,
        category: category,
        location: location,
        imageUrl: '', // Se a√±adir√° despu√©s si es necesario
        expiryDate: expiryDate,
        userId: '', // Se asignar√° cuando se guarde
        nutritionalInfo: nutritionalInfo,
        notes: 'Producto identificado autom√°ticamente por IA', // Nota especial
      );
    } catch (e) {
      print('‚ùå Error creando producto desde an√°lisis: $e');
      return null;
    }
  }

  /// üçÖ Analizar m√∫ltiples productos en una imagen
  Future<List<Product>> analyzeMultipleProductsFromImage(File imageFile) async {
    try {
      // Validaciones tempranas
      if (_apiKey.isEmpty) {
        print('‚ùå API key no configurada');
        throw Exception('API key de Gemini no configurada. Verifica tu archivo .env');
      }
  
      if (!await imageFile.exists()) {
        throw Exception('El archivo de imagen no existe o no es accesible');
      }
  
      final fileSize = await imageFile.length();
      if (fileSize == 0) {
        throw Exception('El archivo de imagen est√° vac√≠o');
      }
  
      print('üì∏ Analizando m√∫ltiples productos en imagen...');
      print('üìä Tama√±o de archivo: ${fileSize} bytes');
  
      final bytes = await imageFile.readAsBytes();
      
      final prompt = '''
Analiza esta imagen e identifica TODOS los productos alimentarios visibles.

Crea una lista de productos individuales que se pueden a√±adir a un inventario dom√©stico.

Formato JSON:
{
  "products": [
    {
      "name": "producto1",
      "category": "categor√≠a",
      "estimated_quantity": 1,
      "unit": "unidades",
      "suggested_location": "Nevera",
      "estimated_expiry_days": 7,
      "confidence": 0.8
    },
    // ... m√°s productos
  ],
  "scene_description": "descripci√≥n_general_de_la_imagen"
}

CATEGOR√çAS: L√°cteos, Frutas, Verduras, Carnes, Pescados, Granos, Bebidas, Snacks, Congelados, Panader√≠a, Cereales, Condimentos, Conservas, Dulces
UBICACIONES: Nevera, Despensa, Congelador, Armario, Especias
UNIDADES: unidades, g, kg, ml, L, paquete, lata, botella
''';

      final model = GenerativeModel(
        model: _modelName,
        apiKey: _apiKey,
        generationConfig: GenerationConfig(
          temperature: 0.3,
          topP: 0.8,
          maxOutputTokens: 3072,
        ),
      );

      final content = [
        Content.multi([
          TextPart(prompt),
          DataPart('image/jpeg', bytes),
        ])
      ];

      final response = await model.generateContent(content);

      if (response.candidates.isEmpty) return [];

      final responseText = response.candidates.first.content.parts
          .whereType<TextPart>()
          .map((part) => part.text)
          .join();

      final jsonStr = _extractJsonFromResponse(responseText);
      final data = jsonDecode(jsonStr) as Map<String, dynamic>;

      final products = <Product>[];
      final productsList = data['products'] as List<dynamic>? ?? [];

      for (final productData in productsList) {
        if (productData is Map<String, dynamic>) {
          final confidence = (productData['confidence'] as num?)?.toDouble() ?? 0.0;
          
          if (confidence >= 0.4) {
            final product = Product(
              id: DateTime.now().millisecondsSinceEpoch.toString() + products.length.toString(),
              name: productData['name'] as String? ?? 'Producto',
              quantity: (productData['estimated_quantity'] as num?)?.toInt() ?? 1,
              unit: productData['unit'] as String? ?? 'unidades',
              category: productData['category'] as String? ?? 'Otros',
              location: productData['suggested_location'] as String? ?? 'Despensa',
              imageUrl: '',
              expiryDate: DateTime.now().add(Duration(
                days: (productData['estimated_expiry_days'] as num?)?.toInt() ?? 7,
              )),
              userId: '',
              notes: 'Identificado autom√°ticamente por IA',
            );
            
            products.add(product);
          }
        }
      }

      print('‚úÖ ${products.length} productos identificados en la imagen');
      return products;
    } catch (e) {
      print('‚ùå Error analizando m√∫ltiples productos: $e');
      rethrow; // Re-lanzar para que llegue al UI
    }
  }

  /// üß™ Probar conexi√≥n con Gemini Vision
  Future<bool> testConnection() async {
    try {
      print('üîß Probando conexi√≥n con Gemini Vision para an√°lisis de productos...');
      
      if (_apiKey.isEmpty) {
        print('‚ùå API key no configurada');
        return false;
      }
      
      final model = GenerativeModel(
        model: _modelName,
        apiKey: _apiKey,
      );
      
      final response = await model.generateContent([
        Content.text('Responde √∫nicamente "OK" si puedes analizar productos en im√°genes')
      ]);
      
      if (response.candidates.isEmpty) {
        print('‚ùå Sin respuesta de Gemini');
        return false;
      }
      
      final text = response.candidates.first.content.parts
          .whereType<TextPart>()
          .map((part) => part.text)
          .join();
      
      print('‚úÖ Conexi√≥n exitosa con Gemini para an√°lisis de productos');
      print('Respuesta: $text');
      
      return true;
    } catch (e) {
      print('‚ùå Error probando conexi√≥n: $e');
      return false;
    }
  }

  /// üìä Obtener estad√≠sticas de productos analizados
  Map<String, dynamic> getAnalysisStats() {
    return {
      'total_analyzed': 0, // Implementar contador si es necesario
      'success_rate': 0.85, // Ejemplo
      'most_common_categories': [
        'Frutas',
        'Verduras',
        'L√°cteos',
      ],
      'api_available': _apiKey.isNotEmpty,
    };
  }
}